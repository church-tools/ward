@use "card" as *;
@use "color";
@use "shadow";
@use "animation";
@use "layout-classes";
@use "shadow-classes";
@use 'sass:map';

.card {
    display: flex;
    flex-direction: column;
    border-radius: $border-radius;
    background-color: $background-color;
    
    &:not(.clear) {
        @include shadow;
    }
    @each $color in color.$names {
        &.#{"" + $color} {
            background-color: map.get(color.$backgrounds, $color);
            color: map.get(color.$foregrounds, $color);
        }
    }

    &.same-height {
        height: 100%;
        .card-body {
            justify-content: end;
        }
    }

    &.clear {
        background-color: transparent;
    }
    &.round {
        border-radius: $border-radius-round;
    }

    &.background-card {
        background-color: color.$canvas-background;
    }

    &.canvas-background-card {
        background-color: $background-transparent-color;
        @include shadow.box(3);
        &:not(.suppress-canvas-card-animation) {
            animation: appear-on-page animation.$duration-lg ease-out;
        }
    }

    &.selectable-card {
        cursor: pointer;
        transition: all animation.$duration animation.$ease-out;
        &:hover {
            background-color: $hover-background-color;
            @include shadow.box(2);
        }
        &.active {
            background-color: $active-background-color;
            @include shadow.box(4);
        }
    }

    &.canvas-card {
        background-color: $background-transparent-color;
        &:not(.suppress-canvas-card-animation) {
            animation: appear-on-page animation.$duration-lg ease-out;
        }

        @each $color in color.$names {
            &.#{"" + $color} {
                background-color: map.get(color.$backgrounds, $color) light-dark(0.6, 0.33);
                color: map.get(color.$foregrounds, $color);
            }
        }
        &.selectable-card {
            &:hover {
                background-color: $hover-background-transparent-color;
                @include shadow.box(2);
            }
            &.active {
                background-color: $active-background-transparent-color;
                @include shadow.box(4);
            }
        }
    }

    .card-footer {
        margin-top: auto;
        display: flex;
        justify-content: space-between;
        grid-column-gap: 0.75rem;
        border-top: $divider;
        border-top-color: $divider-color;
        padding: 1rem 1.5rem;
        &.center {
            justify-content: center;
        }
        & > * {
            &:only-child {
                margin: 0 auto;
            }
        }
    }

    .card-body {
        @extend .gap-3;
        &.sparse { @extend .gap-5; }
        &.dense { @extend .gap-1; }
        padding: 1rem;
        flex-grow: 1;
        display: flex;
        flex-direction: column;
        &.row { flex-direction: row; }
        box-sizing: border-box;
    }

    .background-card-body {
        @extend .card-body;
        @extend .gap-4;
    }
}

.acrylic-card {
    margin: 0;
    border-radius: $border-radius;
    border: 1px solid color.$canvas-border;
    background-color: $background-color-transparent;
    @include acrylic-background;
    @include shadow.dropdown-box;
}

.divider-border-top {
    border-top: $divider;
    border-top-color: $divider-color;
}
.divider-border-left {
    border-left: $divider;
    border-left-color: $divider-color;
}
.divider-border-right {
    border-right: $divider;
    border-right-color: $divider-color;
}
.divider-border-bottom {
    border-bottom: $divider;
    border-bottom-color: $divider-color;
}

@keyframes appear-on-page {
    0% {
        opacity: 0.75;
        transform: translateY(0.5rem);
    }
    100% {
        opacity: 1;
        transform: translateY(0);
    }
}

hr {
    margin-top: 1rem 0 0 0;
    background: none;
    opacity: 1;
    border-top: $divider;
}
