@use "form";
@use "font";
@use "card";
@use "input";
@use "shadow";
@use "color";
@use 'sass:map';
@use 'sass:color' as sassColor;

$color-disabled: #bdbdbd;
$color-disabled-dark: #5c5c5c;
$background-disabled: #f0f0f0;
$background-disabled-dark: #141414;

:host {
    display: flex;
    align-items: center;

    button, .button {
        text-decoration: none !important;
        width: 100%;
        min-height: 2.25rem;
        box-sizing: border-box;
        transition: all 0.1s ease;
        flex-wrap: nowrap;
        text-wrap: nowrap;
        white-space: nowrap;
        text-overflow: ellipsis;
        font-family: font.$family;
        font-weight: font.$weight;
        font-size: font.$size;
        gap: 0.5rem;
        border-radius: card.$border-radius-sm;
        border: none;
        padding: 0.125rem 0.75rem;
        display: flex;
        align-items: center;
        justify-content: center;
        position: relative;
        cursor: pointer;

        &:disabled, &.disabled {
            cursor: not-allowed;
            color: light-dark($color-disabled, $color-disabled-dark);
            background-color: light-dark($background-disabled, $background-disabled-dark);
            &.form-btn {
                background-color: input.$disabled-background-color;
                color: light-dark(input.$disabled-border-color, input.$disabled-border-color-dark);
                border: 1px solid light-dark(input.$disabled-border-color, input.$disabled-border-color-dark);
            }
        }
    }

    &.primary-btn {
        button, .button {
            font-weight: font.$weight-md;
            &:not(:disabled):not(.disabled) {
                @include font.inverse-color;
                @include shadow.box(2);
                &:hover, &:focus {
                    @include font.inverse-color;
                }
            }
        }
        @each $color in color.$names {
            &.#{"" + $color}-btn {
                button, .button {
                    &:not(:disabled):not(.disabled) {
                        @media (prefers-color-scheme: light) {
                            $value: map.get(color.$foregrounds, $color);
                            background-color: $value;
                            &:hover { background-color: sassColor.adjust($value, $lightness: 5%); }
                            &:active { background-color: sassColor.adjust($value, $lightness: 10%); }
                        }
                        @media (prefers-color-scheme: dark) {
                            $value: map.get(color.$foregrounds-dark, $color);
                            background-color: $value;
                            &:hover { background-color: sassColor.adjust($value, $lightness: 5%); }
                            &:active { background-color: sassColor.adjust($value, $lightness: 10%); }
                        }
                    }
                }
            }
        }
    }

    &.secondary-btn {
        button, .button {
            &:not(:disabled):not(.disabled) {
                border-style: solid;
                border-width: 1px;
                @include font.color;
                @include shadow.box(1);
                &:hover, &:focus { @include font.color; }
                @media (prefers-color-scheme: light) {
                    border-color: rgba(input.$border-color, 0.5);
                    background-color: card.$background-transparent-color;
                    &:hover {
                        background-color: card.$hover-background-transparent-color;
                    }
                    &:active {
                        background-color: card.$active-background-transparent-color;
                    }
                }
                @media (prefers-color-scheme: dark) {
                    border-color: rgba(input.$border-color-dark, 0.1);
                    background-color: card.$background-transparent-color-dark;
                    &:hover {
                        background-color: card.$hover-background-transparent-color-dark;
                    }
                    &:active {
                        background-color: card.$active-background-transparent-color-dark;
                    }
                }
            }
        }
    }

    &.subtle-btn {
        button, .button {
            background-color: transparent;
            border: none;
            &:disabled, &.disabled {
                @include font.muted;
            }
            &:not(:disabled):not(.disabled) {
                @include font.color;
                &:focus, &:hover {
                    background-color: light-dark(rgba(font.$color, 0.1), rgba(font.$color-dark, 0.1));
                }
                &:active {
                    background-color: light-dark(rgba(font.$color, 0.2), rgba(font.$color-dark, 0.2));
                }
            }
        }
        &.invert {
            button, .button {
                color: light-dark(font.$color-dark, font.$color) !important;
                &:hover {
                    background-color: light-dark(rgba(font.$color-dark, 0.1), rgba(font.$color, 0.1)) !important;
                }
                &:active {
                    background-color: light-dark(rgba(font.$color-dark, 0.2), rgba(font.$color, 0.2)) !important;
                }
            }
        }
    }

    &.form-btn {
        button, .button {
            &:disabled, &.disabled {
                background-color: input.$disabled-background-color;
                color: light-dark(input.$disabled-border-color, input.$disabled-border-color-dark);
                border: 1px solid light-dark(input.$disabled-border-color, input.$disabled-border-color-dark);
            }
            &:not(:disabled):not(.disabled) {
                @include font.color;
                border: input.$border;
                border-color: light-dark(input.$border-color, input.$border-color-dark);
                background-color: light-dark(input.$background-color, input.$background-color-dark);
                &:hover {
                    border-color: light-dark(input.$hover-border-color, input.$hover-border-color-dark);
                }
                &:active {
                    border-color: light-dark(input.$hover-border-color, input.$hover-border-color-dark);
                }
            }
        }
    }
    
    &.icon-colored {
        @each $color in color.$names {
            &.#{"" + $color}-btn {
                button, .button {
                    &:not(:disabled):not(.disabled) {
                        app-icon {
                            color: light-dark(map.get(color.$foregrounds, $color), map.get(color.$foregrounds-dark, $color)) !important;
                        }
                    }
                }
            }
        }
    }
    &.large-btn {
        button, .button {
            padding: 0.25rem 0.825rem;
            min-height: 3.25rem;
            font-size: font.$size-lg;
            border-radius: card.$border-radius;
            app-icon {
                font-size: 30px;
                min-height: 30px;
                min-width: 30px;
            }
        }
    }
    &.small-btn {
        button, .button {
            @include font.small;
            padding: 0.125rem 0.5rem;
            min-height: 2rem;
            app-icon {
                font-size: 14px !important;
                min-height: 14px !important;
                min-width: 14px !important;
            }
        }
    }
    &.tiny-btn {
        button, .button {
            @include font.tiny;
            padding: 0.125rem 0.5rem;
            min-height: 1.5rem;
            gap: 0.25rem;
            app-icon {
                font-size: 12px !important;
                min-height: 12px !important;
                min-width: 12px !important;
            }
        }
    }
    &.sharp {
        button, .button {
            border-radius: 0;
        }
    }
    &.medium-icon {
        button, .button {
            app-icon {
                font-size: 24px;
                min-height: 24px;
                min-width: 24px;
            }
        }
    }

    &.icon-only {
        button, .button {
            padding: 0.125rem 0.475rem;
        }
        &.large-btn {
            button, .button {
                padding: 0.25rem 0.625rem;
            }
            &.medium-icon {
                button, .button {
                    padding: 0.25rem 0.75rem;
                }
            }
        }
        &.small-btn {
            button, .button {
                padding: 0.075rem 0.45rem;
            }
        }
        &.tiny-btn {
            button, .button {
                padding: 0.075rem 0.25rem;
            }
        }
        &.narrow {
            button, .button {
                min-height: 1.9rem;
                padding: 0.15rem 0.25rem;
                app-icon {
                    font-size: 16px !important;
                    min-height: 16px !important;
                    min-width: 16px !important;
                }
            }
        }
    }
    
    &.round {
        button, .button {
            border-radius: card.$border-radius-round;
        }
    }
    
    &.highlight-btn {
        button, .button {
            @include form.highlight;
        }
    }

}

.accent-btn { @extend .#{color.$accent}-btn; }